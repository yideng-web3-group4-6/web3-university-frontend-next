/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ArticleMarketInterface extends utils.Interface {
  functions: {
    "articleCount()": FunctionFragment;
    "articles(uint256)": FunctionFragment;
    "authorArticles(address,uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "tippedArticles(address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userTippedArticleIds(address,uint256)": FunctionFragment;
    "web2ToArticleId(string)": FunctionFragment;
    "yiDengToken()": FunctionFragment;
    "publishArticle(string,string)": FunctionFragment;
    "tipArticle(string,uint256)": FunctionFragment;
    "setArticleStatus(string,bool)": FunctionFragment;
    "getArticleInfo(string)": FunctionFragment;
    "articleExists(string)": FunctionFragment;
    "getAuthorArticleIds(address)": FunctionFragment;
    "getUserTippedArticleIds(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "articleCount"
      | "articles"
      | "authorArticles"
      | "owner"
      | "renounceOwnership"
      | "tippedArticles"
      | "transferOwnership"
      | "userTippedArticleIds"
      | "web2ToArticleId"
      | "yiDengToken"
      | "publishArticle"
      | "tipArticle"
      | "setArticleStatus"
      | "getArticleInfo"
      | "articleExists"
      | "getAuthorArticleIds"
      | "getUserTippedArticleIds"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "articleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "articles",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorArticles",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tippedArticles",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userTippedArticleIds",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "web2ToArticleId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "yiDengToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publishArticle",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "tipArticle",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setArticleStatus",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getArticleInfo",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "articleExists",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAuthorArticleIds",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserTippedArticleIds",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "articleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "articles", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorArticles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tippedArticles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userTippedArticleIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "web2ToArticleId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yiDengToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "publishArticle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tipArticle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setArticleStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getArticleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "articleExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAuthorArticleIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserTippedArticleIds",
    data: BytesLike
  ): Result;

  events: {
    "ArticlePublished(uint256,string,string,address)": EventFragment;
    "ArticleTipped(address,uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArticlePublished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ArticleTipped"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface ArticlePublishedEventObject {
  articleId: BigNumber;
  web2ArticleId: string;
  title: string;
  author: string;
}
export type ArticlePublishedEvent = TypedEvent<
  [BigNumber, string, string, string],
  ArticlePublishedEventObject
>;

export type ArticlePublishedEventFilter =
  TypedEventFilter<ArticlePublishedEvent>;

export interface ArticleTippedEventObject {
  tipper: string;
  articleId: BigNumber;
  amount: BigNumber;
  author: string;
}
export type ArticleTippedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string],
  ArticleTippedEventObject
>;

export type ArticleTippedEventFilter = TypedEventFilter<ArticleTippedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ArticleMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ArticleMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    articleCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    articles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, BigNumber] & {
        web2ArticleId: string;
        title: string;
        author: string;
        isActive: boolean;
        totalTips: BigNumber;
      }
    >;

    authorArticles(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tippedArticles(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userTippedArticleIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    web2ToArticleId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    yiDengToken(overrides?: CallOverrides): Promise<[string]>;

    publishArticle(
      web2ArticleId: string,
      title: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    tipArticle(
      web2ArticleId: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setArticleStatus(
      web2ArticleId: string,
      isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getArticleInfo(
      web2ArticleId: string,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean, BigNumber]>;

    articleExists(
      web2ArticleId: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    /**
     * 获取用户发布的文章ID列表
     * @param author 作者地址
     */
    getAuthorArticleIds(
      author: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    /**
     * 获取用户打赏过的文章ID列表
     * @param tipper 打赏者地址
     */
    getUserTippedArticleIds(
      tipper: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;
  };

  articleCount(overrides?: CallOverrides): Promise<BigNumber>;

  articles(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, boolean, BigNumber] & {
      web2ArticleId: string;
      title: string;
      author: string;
      isActive: boolean;
      totalTips: BigNumber;
    }
  >;

  authorArticles(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tippedArticles(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userTippedArticleIds(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  web2ToArticleId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  yiDengToken(overrides?: CallOverrides): Promise<string>;

  publishArticle(
    web2ArticleId: string,
    title: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  tipArticle(
    web2ArticleId: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setArticleStatus(
    web2ArticleId: string,
    isActive: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getArticleInfo(
    web2ArticleId: string,
    overrides?: CallOverrides
  ): Promise<[string, string, boolean, BigNumber]>;

  articleExists(
    web2ArticleId: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  /**
   * 获取用户发布的文章ID列表
   * @param author 作者地址
   */
  getAuthorArticleIds(
    author: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  /**
   * 获取用户打赏过的文章ID列表
   * @param tipper 打赏者地址
   */
  getUserTippedArticleIds(
    tipper: string,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  callStatic: {
    articleCount(overrides?: CallOverrides): Promise<BigNumber>;

    articles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, boolean, BigNumber] & {
        web2ArticleId: string;
        title: string;
        author: string;
        isActive: boolean;
        totalTips: BigNumber;
      }
    >;

    authorArticles(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    tippedArticles(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userTippedArticleIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    web2ToArticleId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yiDengToken(overrides?: CallOverrides): Promise<string>;

    publishArticle(
      web2ArticleId: string,
      title: string,
      overrides?: CallOverrides
    ): Promise<void>;

    tipArticle(
      web2ArticleId: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setArticleStatus(
      web2ArticleId: string,
      isActive: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getArticleInfo(
      web2ArticleId: string,
      overrides?: CallOverrides
    ): Promise<[string, string, boolean, BigNumber]>;

    articleExists(
      web2ArticleId: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    /**
     * 获取用户发布的文章ID列表
     * @param author 作者地址
     */
    getAuthorArticleIds(
      author: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    /**
     * 获取用户打赏过的文章ID列表
     * @param tipper 打赏者地址
     */
    getUserTippedArticleIds(
      tipper: string,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;
  };

  filters: {
    "ArticlePublished(uint256,string,string,address)"(
      articleId?: BigNumberish | null,
      web2ArticleId?: null,
      title?: null,
      author?: string | null
    ): ArticlePublishedEventFilter;
    ArticlePublished(
      articleId?: BigNumberish | null,
      web2ArticleId?: null,
      title?: null,
      author?: string | null
    ): ArticlePublishedEventFilter;

    "ArticleTipped(address,uint256,uint256,address)"(
      tipper?: string | null,
      articleId?: BigNumberish | null,
      amount?: null,
      author?: string | null
    ): ArticleTippedEventFilter;
    ArticleTipped(
      tipper?: string | null,
      articleId?: BigNumberish | null,
      amount?: null,
      author?: string | null
    ): ArticleTippedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    articleCount(overrides?: CallOverrides): Promise<BigNumber>;

    articles(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    authorArticles(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tippedArticles(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userTippedArticleIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    web2ToArticleId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    yiDengToken(overrides?: CallOverrides): Promise<BigNumber>;

    publishArticle(
      web2ArticleId: string,
      title: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    tipArticle(
      web2ArticleId: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setArticleStatus(
      web2ArticleId: string,
      isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getArticleInfo(
      web2ArticleId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    articleExists(
      web2ArticleId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * 获取用户发布的文章ID列表
     * @param author 作者地址
     */
    getAuthorArticleIds(
      author: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    /**
     * 获取用户打赏过的文章ID列表
     * @param tipper 打赏者地址
     */
    getUserTippedArticleIds(
      tipper: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    articleCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    articles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    authorArticles(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tippedArticles(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userTippedArticleIds(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    web2ToArticleId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yiDengToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    publishArticle(
      web2ArticleId: string,
      title: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    tipArticle(
      web2ArticleId: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setArticleStatus(
      web2ArticleId: string,
      isActive: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getArticleInfo(
      web2ArticleId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    articleExists(
      web2ArticleId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * 获取用户发布的文章ID列表
     * @param author 作者地址
     */
    getAuthorArticleIds(
      author: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * 获取用户打赏过的文章ID列表
     * @param tipper 打赏者地址
     */
    getUserTippedArticleIds(
      tipper: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
