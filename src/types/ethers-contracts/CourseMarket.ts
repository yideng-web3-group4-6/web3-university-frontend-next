/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CourseMarketInterface extends utils.Interface {
  functions: {
    "certificate()": FunctionFragment;
    "courseCount()": FunctionFragment;
    "courses(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userCourses(address,uint256)": FunctionFragment;
    "web2ToCourseId(string)": FunctionFragment;
    "yiDengToken()": FunctionFragment;
    "addCourse(string,string,uint256)": FunctionFragment;
    "purchaseCourse(string)": FunctionFragment;
    "verifyCourseCompletion(address,string)": FunctionFragment;
    "batchVerifyCourseCompletion(address[],string)": FunctionFragment;
    "hasCourse(address,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "certificate"
      | "courseCount"
      | "courses"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "userCourses"
      | "web2ToCourseId"
      | "yiDengToken"
      | "addCourse"
      | "purchaseCourse"
      | "verifyCourseCompletion"
      | "batchVerifyCourseCompletion"
      | "hasCourse"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "certificate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "courseCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "courses",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userCourses",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "web2ToCourseId",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "yiDengToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addCourse",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "purchaseCourse",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyCourseCompletion",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "batchVerifyCourseCompletion",
    values: [string[], string]
  ): string;
  encodeFunctionData(
    functionFragment: "hasCourse",
    values: [string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "certificate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "courseCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "courses", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userCourses",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "web2ToCourseId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yiDengToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addCourse", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "purchaseCourse",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyCourseCompletion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "batchVerifyCourseCompletion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasCourse", data: BytesLike): Result;

  events: {
    "CourseAdded(uint256,string,string)": EventFragment;
    "CourseCompleted(address,uint256,uint256)": EventFragment;
    "CoursePurchased(address,uint256,string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CourseAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CourseCompleted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CoursePurchased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export interface CourseAddedEventObject {
  courseId: BigNumber;
  web2CourseId: string;
  name: string;
}
export type CourseAddedEvent = TypedEvent<
  [BigNumber, string, string],
  CourseAddedEventObject
>;

export type CourseAddedEventFilter = TypedEventFilter<CourseAddedEvent>;

export interface CourseCompletedEventObject {
  student: string;
  courseId: BigNumber;
  certificateId: BigNumber;
}
export type CourseCompletedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  CourseCompletedEventObject
>;

export type CourseCompletedEventFilter = TypedEventFilter<CourseCompletedEvent>;

export interface CoursePurchasedEventObject {
  buyer: string;
  courseId: BigNumber;
  web2CourseId: string;
}
export type CoursePurchasedEvent = TypedEvent<
  [string, BigNumber, string],
  CoursePurchasedEventObject
>;

export type CoursePurchasedEventFilter = TypedEventFilter<CoursePurchasedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface CourseMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CourseMarketInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    certificate(overrides?: CallOverrides): Promise<[string]>;

    courseCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    courses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, string] & {
        web2CourseId: string;
        name: string;
        price: BigNumber;
        isActive: boolean;
        creator: string;
      }
    >;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<[string]>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userCourses(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    web2ToCourseId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    yiDengToken(overrides?: CallOverrides): Promise<[string]>;

    /**
     * 添加新课程
     * @param name 课程名称
     * @param price 课程价格(YD代币)
     * @param web2CourseId Web2平台的课程ID
     */
    addCourse(
      web2CourseId: string,
      name: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * 购买课程
     * @param web2CourseId Web2平台的课程ID
     */
    purchaseCourse(
      web2CourseId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * 验证课程完成并发放证书
     * @param student 学生地址
     * @param web2CourseId Web2平台的课程ID
     */
    verifyCourseCompletion(
      student: string,
      web2CourseId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * 批量验证课程完成
     * @param students 学生地址数组
     * @param web2CourseId Web2平台的课程ID
     */
    batchVerifyCourseCompletion(
      students: string[],
      web2CourseId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    /**
     * 检查用户是否已购买课程
     * @param user 用户地址
     * @param web2CourseId Web2平台的课程ID
     */
    hasCourse(
      user: string,
      web2CourseId: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  certificate(overrides?: CallOverrides): Promise<string>;

  courseCount(overrides?: CallOverrides): Promise<BigNumber>;

  courses(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, boolean, string] & {
      web2CourseId: string;
      name: string;
      price: BigNumber;
      isActive: boolean;
      creator: string;
    }
  >;

  /**
   * Returns the address of the current owner.
   */
  owner(overrides?: CallOverrides): Promise<string>;

  /**
   * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
   */
  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
   */
  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userCourses(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  web2ToCourseId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  yiDengToken(overrides?: CallOverrides): Promise<string>;

  /**
   * 添加新课程
   * @param name 课程名称
   * @param price 课程价格(YD代币)
   * @param web2CourseId Web2平台的课程ID
   */
  addCourse(
    web2CourseId: string,
    name: string,
    price: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * 购买课程
   * @param web2CourseId Web2平台的课程ID
   */
  purchaseCourse(
    web2CourseId: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * 验证课程完成并发放证书
   * @param student 学生地址
   * @param web2CourseId Web2平台的课程ID
   */
  verifyCourseCompletion(
    student: string,
    web2CourseId: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * 批量验证课程完成
   * @param students 学生地址数组
   * @param web2CourseId Web2平台的课程ID
   */
  batchVerifyCourseCompletion(
    students: string[],
    web2CourseId: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  /**
   * 检查用户是否已购买课程
   * @param user 用户地址
   * @param web2CourseId Web2平台的课程ID
   */
  hasCourse(
    user: string,
    web2CourseId: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    certificate(overrides?: CallOverrides): Promise<string>;

    courseCount(overrides?: CallOverrides): Promise<BigNumber>;

    courses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, boolean, string] & {
        web2CourseId: string;
        name: string;
        price: BigNumber;
        isActive: boolean;
        creator: string;
      }
    >;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<string>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userCourses(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    web2ToCourseId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    yiDengToken(overrides?: CallOverrides): Promise<string>;

    /**
     * 添加新课程
     * @param name 课程名称
     * @param price 课程价格(YD代币)
     * @param web2CourseId Web2平台的课程ID
     */
    addCourse(
      web2CourseId: string,
      name: string,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * 购买课程
     * @param web2CourseId Web2平台的课程ID
     */
    purchaseCourse(
      web2CourseId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * 验证课程完成并发放证书
     * @param student 学生地址
     * @param web2CourseId Web2平台的课程ID
     */
    verifyCourseCompletion(
      student: string,
      web2CourseId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * 批量验证课程完成
     * @param students 学生地址数组
     * @param web2CourseId Web2平台的课程ID
     */
    batchVerifyCourseCompletion(
      students: string[],
      web2CourseId: string,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * 检查用户是否已购买课程
     * @param user 用户地址
     * @param web2CourseId Web2平台的课程ID
     */
    hasCourse(
      user: string,
      web2CourseId: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CourseAdded(uint256,string,string)"(
      courseId?: BigNumberish | null,
      web2CourseId?: null,
      name?: null
    ): CourseAddedEventFilter;
    CourseAdded(
      courseId?: BigNumberish | null,
      web2CourseId?: null,
      name?: null
    ): CourseAddedEventFilter;

    "CourseCompleted(address,uint256,uint256)"(
      student?: string | null,
      courseId?: BigNumberish | null,
      certificateId?: null
    ): CourseCompletedEventFilter;
    CourseCompleted(
      student?: string | null,
      courseId?: BigNumberish | null,
      certificateId?: null
    ): CourseCompletedEventFilter;

    "CoursePurchased(address,uint256,string)"(
      buyer?: string | null,
      courseId?: BigNumberish | null,
      web2CourseId?: null
    ): CoursePurchasedEventFilter;
    CoursePurchased(
      buyer?: string | null,
      courseId?: BigNumberish | null,
      web2CourseId?: null
    ): CoursePurchasedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    certificate(overrides?: CallOverrides): Promise<BigNumber>;

    courseCount(overrides?: CallOverrides): Promise<BigNumber>;

    courses(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    userCourses(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    web2ToCourseId(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    yiDengToken(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * 添加新课程
     * @param name 课程名称
     * @param price 课程价格(YD代币)
     * @param web2CourseId Web2平台的课程ID
     */
    addCourse(
      web2CourseId: string,
      name: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * 购买课程
     * @param web2CourseId Web2平台的课程ID
     */
    purchaseCourse(
      web2CourseId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * 验证课程完成并发放证书
     * @param student 学生地址
     * @param web2CourseId Web2平台的课程ID
     */
    verifyCourseCompletion(
      student: string,
      web2CourseId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * 批量验证课程完成
     * @param students 学生地址数组
     * @param web2CourseId Web2平台的课程ID
     */
    batchVerifyCourseCompletion(
      students: string[],
      web2CourseId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    /**
     * 检查用户是否已购买课程
     * @param user 用户地址
     * @param web2CourseId Web2平台的课程ID
     */
    hasCourse(
      user: string,
      web2CourseId: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    certificate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    courseCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    courses(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * Returns the address of the current owner.
     */
    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.
     */
    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userCourses(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    web2ToCourseId(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yiDengToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    /**
     * 添加新课程
     * @param name 课程名称
     * @param price 课程价格(YD代币)
     * @param web2CourseId Web2平台的课程ID
     */
    addCourse(
      web2CourseId: string,
      name: string,
      price: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * 购买课程
     * @param web2CourseId Web2平台的课程ID
     */
    purchaseCourse(
      web2CourseId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * 验证课程完成并发放证书
     * @param student 学生地址
     * @param web2CourseId Web2平台的课程ID
     */
    verifyCourseCompletion(
      student: string,
      web2CourseId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * 批量验证课程完成
     * @param students 学生地址数组
     * @param web2CourseId Web2平台的课程ID
     */
    batchVerifyCourseCompletion(
      students: string[],
      web2CourseId: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    /**
     * 检查用户是否已购买课程
     * @param user 用户地址
     * @param web2CourseId Web2平台的课程ID
     */
    hasCourse(
      user: string,
      web2CourseId: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
